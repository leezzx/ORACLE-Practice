SELECT * FROM NOTICE ORDER BY HIT; -- ORDER BY ASC, DESC : 정렬하기, 생략하면 ASC
SELECT * FROM NOTICE ORDER BY HIT DESC;
SELECT * FROM NOTICE ORDER BY HIT DESC, REGDATE DESC; -- 같은 값일 경우 이차정렬
SELECT * FROM MEMBER WHERE NAME LIKE '박%' ORDER BY AGE ASC;



-- 집계함수 : SUM, MIN, MAX, COUNT, AVG

SELECT COUNT(ID) FROM NOTICE;

SELECT WRITER_ID, COUNT(ID) COUNT 
FROM NOTICE 
GROUP BY WRITER_ID
ORDER BY COUNT DESC;

-- WHERE 절에서는 집계함 수 쓸 수 없음으로 HAVING을 활용

SELECT WRITER_ID, COUNT(ID) COUNT 
FROM NOTICE 
GROUP BY WRITER_ID
HAVING COUNT(ID) <= 2
ORDER BY COUNT DESC;

-- 실행 순서 : FROM -> CONNECT BY -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY
-- 작성 순서 : SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER BY

SELECT AVG(HIT) FROM NOTICE;



-- 정렬 후 순위 달기 : ROW_NUMBER(), RANK() 등의 함수 활용

SELECT ROW_NUMBER() OVER (ORDER BY HIT), ID, TITLE, WRITER_ID, REGDATE, HIT
FROM NOTICE;

SELECT RANK() OVER (ORDER BY HIT), ID, TITLE, WRITER_ID, REGDATE, HIT
FROM NOTICE; -- 등수 : 1 2 3 4 4 6 ...

SELECT DENSE_RANK() OVER (ORDER BY HIT), ID, TITLE, WRITER_ID, REGDATE, HIT
FROM NOTICE; -- 등수 : 1 2 3 4 4 5 ...

SELECT RANK() OVER (PARTITION BY WRITER_ID ORDER BY HIT DESC), ID, TITLE, WRITER_ID, REGDATE, HIT
FROM NOTICE; -- 등수 및 WRTIER_ID로 분류



-- 서브쿼리(부조화) : 구절의 순서를 바꿔야 하는 경우

SELECT * 
FROM (SELECT * FROM NOTICE ORDER BY REGDATE DESC)
WHERE ROWNUM BETWEEN 1 AND 5;

SELECT *
FROM MEMBER
WHERE AGE >= (SELECT AVG(AGE) FROM MEMBER);